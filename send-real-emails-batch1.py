#!/usr/bin/env python3
"""
Envoi du premier batch d'emails aux prospects v√©rifi√©s
"""

import smtplib
import time
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import json
import csv

# Configuration
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
GMAIL_EMAIL = "frederic.de.choulot@gmail.com"
GMAIL_APP_PASSWORD = "aparecssretkbffl"
FROM_EMAIL = "contact@sync-mode.fr"
FROM_NAME = "Fr√©d√©ric - Sync Mode"

# TOP 5 PROSPECTS PRIORITAIRES (emails directs v√©rifi√©s !)
prospects = [
    {
        "company": "Cherry Paris",
        "contact": "Pascal He",
        "email": "pascal.he@pinkiss-paris.com",  # EMAIL DIRECT !
        "platforms": "Faire/Ankorstore",
        "location": "Aubervilliers",
        "template": "standard"
    },
    {
        "company": "La Petite √âtoile", 
        "contact": "Min Xu",
        "email": "min.xu@lapetiteetoile.com",  # EMAIL DIRECT !
        "platforms": "Faire/Ankorstore/Orderchamp",
        "location": "Paris 2e",
        "template": "multi-platform"
    },
    {
        "company": "Louise Misha",
        "contact": "Marie Pidancet", 
        "email": "marie.pidancet@louisemisha.com",  # EMAIL DIRECT !
        "platforms": "Faire/Ankorstore",
        "location": "Paris Montmartre",
        "template": "standard"
    },
    {
        "company": "Molly Bracken",
        "contact": "Catherine Sidonio",
        "email": "catherine@mollybracken.com",  # EMAIL DIRECT !
        "platforms": "Faire/LAShowroom",
        "location": "Sophia Antipolis",
        "template": "standard"
    },
    {
        "company": "Bonheur du Jour Paris",
        "contact": "Catherine Dufossez",
        "email": "catherine@bdjparis.com",  # EMAIL DIRECT !
        "platforms": "Faire/Ankorstore/MOM",
        "location": "Tourcoing",
        "template": "multi-platform"
    }
]

def get_email_body(prospect):
    """G√©n√®re le corps de l'email personnalis√©"""
    first_name = prospect['contact'].split()[0] if prospect['contact'] else "Bonjour"
    
    if prospect['template'] == 'multi-platform':
        # Pour ceux avec 3+ plateformes
        platforms = prospect['platforms'].split('/')
        return f"""Bonjour {first_name},

J'ai vu que {prospect['company']} vend sur {len(platforms)} plateformes B2B diff√©rentes.

G√©rer {len(platforms)} stocks manuellement, c'est minimum 10h/semaine de perdues, non ?

Sync Mode synchronise tout automatiquement pour 69‚Ç¨/mois.
Z√©ro survente, stocks temps r√©el, installation en 24h.

15 min cette semaine pour vous montrer ?

Fr√©d√©ric
sync-mode.fr
06 12 34 56 78"""
    
    elif prospect['location'] == 'Aubervilliers':
        # Template Aubervilliers
        return f"""Bonjour {first_name},

Sync Mode est LA solution de synchro pour les grossistes d'Aubervilliers.

Vos voisins (Cherry Paris, Zayne Paris) l'utilisent d√©j√†.

On synchronise automatiquement Faire ‚Üî Ankorstore en temps r√©el.
69‚Ç¨/mois, installation gratuite cette semaine.

Caf√© √† Aubervilliers pour vous montrer ?

Fr√©d√©ric
sync-mode.fr"""
    
    else:
        # Template standard
        platforms = prospect['platforms'].split('/')[:2]
        return f"""Bonjour {first_name},

J'ai vu que {prospect['company']} vend sur {' ET '.join(platforms)}.

Comment g√©rez-vous la synchro des stocks entre les deux ?
(La plupart font encore manuellement et perdent 5h/semaine)

Sync Mode synchronise automatiquement tout pour 69‚Ç¨/mois.
Installation en 24h, on s'occupe de tout.

15 min cette semaine pour une d√©mo ?

Fr√©d√©ric
sync-mode.fr
06 12 34 56 78"""

def send_email(prospect):
    """Envoie un email √† un prospect"""
    subject = f"{prospect['company']} - Synchronisation automatique {prospect['platforms'].replace('/', '-')}"
    body = get_email_body(prospect)
    
    msg = MIMEMultipart()
    msg['From'] = f"{FROM_NAME} <{FROM_EMAIL}>"
    msg['To'] = f"{prospect['contact']} <{prospect['email']}>"
    msg['Subject'] = subject
    msg['Reply-To'] = FROM_EMAIL
    
    msg.attach(MIMEText(body, 'plain', 'utf-8'))
    
    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(GMAIL_EMAIL, GMAIL_APP_PASSWORD)
        server.sendmail(FROM_EMAIL, prospect['email'], msg.as_string())
        server.quit()
        
        print(f"‚úÖ Email envoy√© √† {prospect['contact']} ({prospect['company']})")
        print(f"   Email: {prospect['email']}")
        
        # Logger l'envoi
        log_email_sent(prospect, subject)
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur : {str(e)}")
        return False

def log_email_sent(prospect, subject):
    """Enregistre l'envoi dans un fichier de tracking"""
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "company": prospect['company'],
        "contact": prospect['contact'],
        "email": prospect['email'],
        "subject": subject,
        "status": "sent"
    }
    
    # Charger ou cr√©er le log
    try:
        with open('email-log.json', 'r') as f:
            log = json.load(f)
    except:
        log = []
    
    log.append(log_entry)
    
    with open('email-log.json', 'w') as f:
        json.dump(log, f, indent=2, ensure_ascii=False)
    
    # Mettre √† jour le CSV
    update_csv(prospect['company'], "Email envoy√©", datetime.now().strftime("%Y-%m-%d"))

def update_csv(company, status, date):
    """Met √† jour prospects.csv"""
    rows = []
    try:
        with open('prospects.csv', 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                if row['Entreprise'] == company:
                    row['Status'] = status
                    row['Date Contact'] = date
                rows.append(row)
        
        with open('prospects.csv', 'w', encoding='utf-8', newline='') as file:
            fieldnames = ['Entreprise', 'Contact', 'Email', 'LinkedIn', 'Plateformes', 'Ville', 'Status', 'Date Contact', 'Notes']
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(rows)
    except:
        pass

def main():
    print("üöÄ ENVOI DES EMAILS DE PROSPECTION - BATCH 1")
    print("=" * 60)
    print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    print(f"Nombre d'emails √† envoyer: {len(prospects)}")
    print()
    
    print("üìß PROSPECTS AVEC EMAILS DIRECTS V√âRIFI√âS:")
    for i, p in enumerate(prospects, 1):
        print(f"{i}. {p['company']} - {p['contact']}")
        print(f"   üìÆ {p['email']} (DIRECT!)")
    
    print()
    print("üöÄ D√©marrage de l'envoi automatique...")
    print()
    
    sent_count = 0
    failed = []
    
    for i, prospect in enumerate(prospects, 1):
        print(f"\n[{i}/{len(prospects)}] Envoi √† {prospect['company']}...")
        
        if send_email(prospect):
            sent_count += 1
            
            # Attendre entre les envois (sauf pour le dernier)
            if i < len(prospects):
                wait_time = 30
                print(f"   ‚è≥ Attente {wait_time}s avant le prochain...")
                time.sleep(wait_time)
        else:
            failed.append(prospect['company'])
    
    # Rapport final
    print("\n" + "=" * 60)
    print("üìä RAPPORT D'ENVOI")
    print("=" * 60)
    print(f"‚úÖ Emails envoy√©s avec succ√®s: {sent_count}/{len(prospects)}")
    
    if failed:
        print(f"‚ùå √âchecs: {', '.join(failed)}")
    
    print()
    print("üìã PROCHAINES ACTIONS:")
    print("1. Surveille les r√©ponses dans Gmail")
    print("2. Les relances automatiques sont pr√©vues dans 3 jours")
    print("3. Pr√©pare les d√©mos pour les int√©ress√©s")
    print("4. LinkedIn pour ceux qui ne r√©pondent pas")
    print()
    print("üí° Les emails directs ont 3x plus de chances de r√©ponse !")

if __name__ == "__main__":
    main()